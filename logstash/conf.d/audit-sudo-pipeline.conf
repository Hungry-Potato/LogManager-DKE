input {
  pipeline {
    address => "audit-sudo-pipeline"
  }
}

filter {
  if [auditd][summary][actor][primary] == "unset" or [auditd][data][tty] == "(none)" or [process][title] in ["(pager)", "bash", "groups", "/bin/sh /usr/bin/lesspipe", "basename /usr/bin/lesspipe", "dirname /usr/bin/lesspipe", "dircolors -b", "clear"]{
    drop{}
  } 
  else if [auditd][message_type] != "syscall" and [auditd][data][syscall] != "execve"{
    drop{}
  }
  else if [user][effective][name] != "root" and ([auditd][summary][actor][primary] != "root" and [auditd][summary][actor][secondary] != "root"){
    drop{}
  }
  else{
    
    mutate{
      rename => {
        "[host][ip]" => "ip"
        "[host][name]" => "hostname"
        "[auditd][data][tty]" => "tty"
        "[process][title]" => "command"
        "[auditd][session]" => "ses"
        "[auditd][summary][actor][primary]" => "user"
        "[auditd][summary][actor][secondary]" => "user-permission"
        "[process][working_directory]" => "pwd"
      }
    }
    

    ruby {
        code => "
          if event.get('ip') && event.get('ip').is_a?(Array)
            ips = event.get('ip').select { |ip| ip.start_with?('10.', '192.') }
            event.set('ip', ips)
          end
        "
    }
    prune {
      interpolate => true
      whitelist_names => ["@timestamp", "hostname", "user", "tty", "pwd", "user-permission", "command", "ip", "ses"]
        
    }


  }
  
}

output {
  # 디버깅용 stdout
  stdout {
    codec => rubydebug
  }
 
  kafka {
    bootstrap_servers => ["10.11.70.51:19092"] # Kafka 브로커 주소
    topic_id => "audit-sudo-pipeline"                     # 전송할 토픽 이름
    codec => json                              # 이벤트를 JSON 형식으로 직렬화
  } 
    

  # Elasticsearch로 전송
  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "auditbeat-sudo-logs-%{+YYYY.MM.dd}"
  }
}
