input {
  pipeline {
    address => "audit-sudo-pipeline-kafka"
  }
}

filter {
  
  # 필요없는 데이터들은 모두 drop
  if [auditd][summary][actor][primary] == "unset" or [auditd][data][tty] == "(none)" or [process][title] in ["(pager)", "bash", "groups", "/bin/sh /usr/bin/lesspipe", "basename /usr/bin/lesspipe", "dirname /usr/bin/lesspipe", "dircolors -b", "clear"]{
    drop{}
  }
  else if [process][title] =~ "uname"{
    drop{}
  }
  else if [auditd][message_type] != "syscall" and [auditd][data][syscall] != "execve"{
    drop{}
  }
  else if [user][effective][name] != "root" and ([auditd][summary][actor][primary] != "root" and [auditd][summary][actor][secondary] != "root"){
    drop{}
  }
  else{

    mutate{
    # 복잡한 필드 이름을 간단한 이름으로 변경
      rename => {
        "[host][ip]" => "ip"
        "[host][name]" => "hostname"
        "[auditd][data][tty]" => "tty"
        "[process][title]" => "command"
        "[auditd][session]" => "ses"
        "[auditd][summary][actor][primary]" => "user"
        "[auditd][summary][actor][secondary]" => "user-permission"
        "[process][working_directory]" => "pwd"
      }
    }

		# ip 필드가 배열일 경우 (10.*, 192.*)만 필터링 -> 다른 불필요한 IP 주소는 제외하기 위해서
    ruby {
        code => "
          if event.get('ip') && event.get('ip').is_a?(Array)
            ips = event.get('ip').select { |ip| ip.start_with?('10.', '192.') }
            event.set('ip', ips)
          end
        "
    }
    
     # 지정된 필드만 유지하고 불필요한 필드는 모두 제거
    prune {
      interpolate => true
      whitelist_names => ["@timestamp", "hostname", "user", "tty", "pwd", "user-permission", "command", "ip", "ses"]

    }
		
		# Discord로 보낼 message 설정
    mutate {
      add_field => { "message" => "
📋 Command Log
🕒 Timestamp       : %{@timestamp}
👤 User            : (%{user}) (%{user-permission})
💻 Hostname        : %{hostname} ([%{ip}])
📂 Working Dir     : %{pwd}
📜 Command         : %{command}
🖥️ TTY             : %{tty}
🆔 Session ID      : %{ses}
" }
    }
  }

}

output {
  stdout {
    codec => rubydebug
  }
  # Discord Webhook으로 전송
  http {
      url => ""
      http_method => "post"
      content_type => "application/json"
      format => "json"
      headers => ["Content-Type", "application/json"]
      mapping => ["content", "%{message}"]
    }

  # 처리된 로그를 Elasticsearch에 저장
  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "auditbeat-sudo-logs-%{+YYYY.MM.dd}"
  }
}

