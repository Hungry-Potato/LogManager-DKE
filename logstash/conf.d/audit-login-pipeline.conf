input {
  pipeline {
    address => "audit-login-pipeline"
  }
}

filter {
  if [auditd][message_type] == "user_login" and [auditd][result] == "fail"{
    mutate {
      rename => {
        "[auditd][message_type]" => "status"
        "[auditd][data][acct]" => "login_id"
        "[host][name]" => "hostname"
        "[source][ip]" => "source_ip"
        "[auditd][data][terminal]" => "method"
        "[auditd][result]" => "result"
        "[host][ip]" => "ip"
      }
    }

    ruby {
        code => "
          if event.get('ip') && event.get('ip').is_a?(Array)
            ips = event.get('ip').select { |ip| ip.start_with?('10.', '192.') }
            event.set('ip', ips)
          end
        "
    }

    prune {
      interpolate => true
      whitelist_names => ["@timestamp", "hostname", "login_id", "source_ip", "method", "result", "ip", "status"]
        
    }

  }
  else if [auditd][message_type] == "user_login" and [auditd][result] == "success"{
    mutate {
      rename => {
        "[auditd][message_type]" => "status"
        "[user][name]" => "login_id"
        "[host][name]" => "hostname"
        "[source][ip]" => "source_ip"
        "[auditd][summary][how]" => "method"
        "[auditd][result]" => "result"
        "[host][ip]" => "ip"
        "[auditd][summary][object][primary]" => "tty"
      }

    }

    ruby {
        code => "
          if event.get('ip') && event.get('ip').is_a?(Array)
            ips = event.get('ip').select { |ip| ip.start_with?('10.', '192.') }
            event.set('ip', ips)
          end
        "
    }
    ruby {
        code => '
          if event.get("tty")
            parts = event.get("tty").split("/")
            if parts.length > 2
              event.set("tty", parts[-2] + parts[-1])
            end
          end
        '
    }

    prune {
      interpolate => true
      whitelist_names => ["@timestamp", "hostname", "login_id", "source_ip", "method", "result", "ip", "tty", "status"]
        
    }

  }
  else if [auditd][message_type] == "user_start" and [auditd][summary][object][primary] == "ssh"{
    mutate {
      rename => {
        "[auditd][message_type]" => "status"
        "[user][name]" => "login_id"
        "[host][name]" => "hostname"
        "[source][ip]" => "source_ip"
        "[auditd][summary][how]" => "method"
        "[auditd][result]" => "result"
        "[host][ip]" => "ip"
        "[auditd][summary][object][primary]" => "check_vscode"
      }

    }

    ruby {
        code => "
          if event.get('ip') && event.get('ip').is_a?(Array)
            ips = event.get('ip').select { |ip| ip.start_with?('10.', '192.') }
            event.set('ip', ips)
          end
        "
    }
    prune {
      interpolate => true
      whitelist_names => ["@timestamp", "hostname", "login_id", "source_ip", "method", "result", "ip", "check_vscode", "status"]
        
    }

  }
  else if [auditd][message_type] == "user_end"{
    if [auditd][summary][how] != "/usr/bin/sudo" and [auditd][summary][how] != "/usr/sbin/sshd"{
      drop{}
    }
    else{
      mutate {
        rename => {
          "[auditd][message_type]" => "status"
          "[user][name]" => "logout_id"
          "[host][name]" => "hostname"
          "[auditd][data][hostname]" => "source_ip"
          "[auditd][summary][how]" => "method"
          "[host][ip]" => "ip"
        }
      }

      ruby {
          code => "
            if event.get('ip') && event.get('ip').is_a?(Array)
              ips = event.get('ip').select { |ip| ip.start_with?('10.', '192.') }
              event.set('ip', ips)
            end
          "
      }
      prune {
        interpolate => true
        whitelist_names => ["@timestamp", "hostname", "logout_id", "source_ip", "method", "ip", "status"]
        
      }
    }
  
  }
  else{
    drop{}
  }

  
}

output {
  # 디버깅용 stdout
  stdout {
    codec => rubydebug
  }
 
  if [status] == "user_start" {
    kafka {
      bootstrap_servers => ["10.11.70.51:19092"] # Kafka 브로커 주소
      topic_id => "audit-login-pipeline"         # 전송할 토픽 이름
      codec => json                              # 이벤트를 JSON 형식으로 직렬화
    }
  }
    

  # Elasticsearch로 전송
  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "auditbeat-login-logs-%{+YYYY.MM.dd}"
  }
}