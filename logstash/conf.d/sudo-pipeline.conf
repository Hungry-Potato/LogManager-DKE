input {
  pipeline {
    address => "sudo-pipeline"
  }
}

filter {
  if [message] and [message] =~ /sudo:/ {
    if [message] =~ /sudo:session/ {
      drop {}
    } else {
      grok {
        match => {
          "message" => [
            "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:hostname} sudo:%{SPACE}%{USERNAME:user} : TTY=%{DATA:tty} ; PWD=%{DATA:pwd} ; USER=%{USERNAME:target_user} ; COMMAND=%{GREEDYDATA:command}"
          ]
        }
      }

      mutate{
        rename => {
          "[host][ip]" => "ip"
        }
      }

      ruby {
        code => "
          if event.get('ip') && event.get('ip').is_a?(Array)
            ips = event.get('ip').select { |ip| ip.start_with?('10.', '192.') }
            event.set('ip', ips)
          end
        "
      }

      prune {
          interpolate => true
          whitelist_names => ["timestamp", "hostname", "user", "tty", "pwd", "target_user", "command", "ip"]
        
      }
    }
  } else {
    drop {}
  }
}

output {
  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "parsed-sudo-logs"
  }
  kafka {
    bootstrap_servers => ["10.11.70.51:19092"] # Kafka 브로커 주소
    topic_id => "parsed-sudo-logs"                     # 전송할 토픽 이름
    codec => json                              # 이벤트를 JSON 형식으로 직렬화
  }

  stdout { codec => rubydebug }
}
